vim9script

# plasma.vim {{{
def GenExitCb(path: string, repo: string): func(job, number): void
  def ExitCb(_: job, status: number): void
    echohl WarningMsg

    if status ==# 0
      echowindow $"{repo} has been cloned successfully"
      return
    endif

    echowindow $"failed to clone {repo}"
    echohl None
  enddef

  return ExitCb
enddef

def Callback(_: channel, msg: string): void
  echohl WarningMsg
  echowindow msg
  echohl None
enddef

def InstallPlasma(repo: string, base: string): void
  const path: string = $"{base}/{repo}"
  const url: string = $"https://{repo}.git"

  if !path->isdirectory()
    const cmd: list<string> = [
      "git",
      "clone",
      "--depth",
      "1",
      "--no-single-branch",
      url,
      path,
    ]
    const opts: dict<any> = {
      out_cb: "Callback",
      err_cb: "Callback",
      exit_cb: GenExitCb(path, url),
    }
    cmd->job_start(opts)
  endif

  execute $"set runtimepath^={path}"
enddef

const plasmaDir: string = $XDG_DATA_HOME->empty()
  ? $"{$HOME}/.local/share/vim/plasma"
  : $"{$XDG_DATA_HOME}/vim/plasma"

InstallPlasma("codeberg.org/9yokuro/plasma.vim", plasmaDir)
InstallPlasma("codeberg.org/9yokuro/plasma-installer.vim", plasmaDir)
InstallPlasma("codeberg.org/9yokuro/plasma-git.vim", plasmaDir)

import autoload "plasma.vim"
import autoload "plasma/git.vim"
import autoload "plasma/installer.vim"
const config: list<plasma.Config> = [
  {
    "repo": "codeberg.org/9yokuro/plasma.vim",
  },
  {
    "repo": "codeberg.org/9yokuro/plasma-installer.vim",
    "merged": true,
  },
  {
    repo: "codeberg.org/9yokuro/plasma-git.vim",
    merged: true,
  },
  {
    repo: "github.com/vim-jp/vimdoc-ja",
    merged: true,
  },
  {
    repo: "github.com/yegappan/lsp",
  },
  {
    repo: "github.com/Eliot00/auto-pairs",
  },
  {
    repo: "github.com/catppuccin/vim",
  },
  {
    repo: "github.com/ycm/poplar.vim",
  },
  {
    repo: "github.com/Bakudankun/qline.vim",
  }
]
const plugins: plasma.Plugins = plasma.ParseConfig(config, plasmaDir)
execute plasma.Load(plugins, plasmaDir)

augroup vimrcAugroup
  autocmd!
  autocmd vimrcAugroup VimEnter * {
    command! InstallPlugin installer.Install(git.Install({ shallowClone: true }), plugins)
    command! UpdatePlugin installer.Update(git.Update(), plugins)
    command! MergeRuntimepaths plasma.MergeRtps(plugins, plasmaDir)
  augroup END
}

# }}}


# lsp
var lspOpts = {
  autoComplete: true,
  autoHighlightDiags: true,
  diagVirtualTextAlign: "after",
  showDiagWithVirtualText: true,
  condensedCompletionMenu: true,
}
autocmd User LspSetup g:LspOptionsSet(lspOpts)

var lspServers = [
  {
     name: "denols",
     filetype: ["javascript", "typescript"],
     path: "/usr/bin/deno",
     args: ["lsp"],
     debug: true,
     initializationOptions: {
       enable: true,
       lint: true,
     }
  },
  {
     name: "vimls",
     filetype: "vim",
     path: "/usr/bin/vim-language-server",
     args: ["--stdio"],
  },
  {
    name: "luals",
    filetype: "lua",
    path: "/usr/bin/lua-language-server",
    args: [],
    workspaceConfig: {
      Lua: {
        hint: {
          enable: true,
        },
      },
    },
  },
  {
    name: "jsonls",
    filetype: ["json"],
    path: "/usr/bin/vscode-json-languageserver",
    args: ["--stdio"]
  },
  {
    filetype: ["json"],
    path: "/usr/bin/deno",
    args: ["lsp"],
    features: {
      documentFormatting: true
    }
  }
]
autocmd User LspSetup g:LspAddServer(lspServers)

# settings
set number
set smartindent
set whichwrap=b,s,<,>,[,]
set encoding=utf-8
set termguicolors
set smartcase
set ignorecase
set expandtab
set shiftwidth=2
set softtabstop=2
set clipboard^=unnamedplus
set fillchars+=eob:\\x20
scriptencoding utf-8
filetype plugin indent on
syntax enable
colorscheme catppuccin_mocha
hi Normal guibg=NONE
hi SignColumn guibg=NONE
g:ambiwidth = "double"


# builtin autocompletion 
set autocomplete
set complete=.^5,w^5,b^5,u^5,o^5
set completeopt=menu,popup,fuzzy
set completefuzzycollect=keyword
inoremap <silent><expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
set wildoptions=pum,fuzzy
set wildmode=noselect:lastused,full
autocmd CmdlineChanged [:\/\?] call wildtrigger()
cnoremap <expr> <Up>   wildmenumode() ? "\<C-E>\<Up>" : "\<Up>"
cnoremap <expr> <Down> wildmenumode() ? "\<C-E>\<Down>" : "\<Down>"


if has('vim_starting')
  # 挿入モード時に非点滅の縦棒タイプのカーソル
  &t_SI ..= "\e[6 q"
  # ノーマルモード時に非点滅のブロックタイプのカーソル
  &t_EI ..= "\e[2 q"
  # 置換モード時に非点滅の下線タイプのカーソル
  &t_SR ..= "\e[4 q"
endif

# gui
set guioptions=AdgLM
set guicursor=n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20

# command
command Config edit ~/.vim/vimrc
